<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Markdown插入图片的方法和技巧]]></title>
      <url>%2F2016%2F09%2F25%2FMarkdown%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E6%8A%80%E5%B7%A7%2F</url>
      <content type="text"><![CDATA[Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有 很多人用它写博客。世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown,完全采用Markdown编辑器的博客平台有Ghost和Typecho。本人在自学过程中，感受到了Markdown的简洁性和广泛的应用，同时在实际应用中需要插入图片的地方几乎无处不在，为了使初学者可以更快找到适合自己的方法，本文对Markdown插入图片的方法和技巧进行了总结。 Markdown插入图片的方法方法一 行内式插入图片行内式语法结构：![Alt text](/path/to/img.png)或![Alt text](/path/to/img.png &quot;Optional title&quot;) 说明：Alt text中填写的是如果图片显示不出来时显示的文字；/path/to/img.png为图片所在的路径，可以是本地图片路径，也可以是网上图片路径；Optional title中填写的是你将鼠标放到图片上之后浮现出来的小框中的内容，是可选的。 方法二 参考式插入图片参考式语法结构：![Alt text][id] 说明：Alt text中填写的是如果图片显示不出来时显示的文字；id是图片参考的名称，而且此id需要预先定义。 id预先定义:[id]: url/to/image &quot;Optional title attribute&quot; 说明：/path/to/img.png为图片所在的路径，可以是本地图片路径，也可以是网上图片路径；Optional title中填写的是你将鼠标放到图片上之后浮现出来的小框中的内容，是可选的。 方法一和方法二本质上是相同的，只是语法的顺序和写法有些区别，但是都不支持更改图片的大小。 方法三 &lt;image&gt;标签插入图片 &lt;image&gt;标签格式写法：&lt;img src=&quot;/path/to/img.png&quot; width = &quot;宽度&quot; height = &quot;高度&quot; alt=&quot;图片名称&quot; /&gt; 说明：/path/to/img.png为图片所在的路径，可以是本地图片路径，也可以是网上图片路径；width后面填的是希望设置的图片宽度；height后面填的是希望设置的图片高度；alt后面填写的是图片的名称。 方法三是直接利用html的 &lt;image&gt;标签来插入图片，它最大的优势在于可以指定图片的大小。 Markdown插入图片的技巧技巧一 使用Mou编辑器来更改图片大小要想改变图片的大小，除了用上面方法三的方法之外，还可以利用Mou编辑器达到目的。语法结构如下：![Alt text](/path/to/img.png =width*height)其实总体语法结构是与方法一相似的，就是后面加上了=width*height,这里就写上所想要设置的宽度和高度即可。这里需要注意的是=前面还有一个空格，不要漏掉。 技巧二 使图片居中显示方法很简单，利用html标签中的&lt;div&gt;即可做到。具体操作是在外面包围div标签并设置align属性为center即可:123&lt;div align="center"&gt; ...&lt;/div&gt; 技巧三 用网址路径插入图片用本地路径有时会出现各种各样的问题，而如果用网址路径相对而言就不会出错，这里主要推荐两种方法： a、首先找一个类似于CloudApp、Droplr的网络分享软件，然后把图片放进去，生成一个网址，最后把这个网址复制到markdown前面方法中提到的/path/to/img.png中即可。 b、通过github储存图片来达到目的。首先将需要的照片放到本地的git仓库中，并提交和发布到github上面，然后访问自己的github，找到那张图片，打开图片，选择Raw按钮，这时你会看到一个页面只有那张图片，这时将此链接地址复制下来，最后把这个网址复制到markdown前面方法中提到的/path/to/img.png中即可。 参考资料 1. 一分钟学会Markdown语法 2. Markdown 语法说明]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Github+Hexo搭建独立域名的静态博客]]></title>
      <url>%2F2016%2F09%2F20%2FGithub%2BHexo%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[1. 前言查阅了很多资料，踩了很多的坑之后，一个拥有独立域名的静态博客终于搭建完成。本文主要叙述了利用github和hexo搭建博客的过程和心得，一方面希望给同样想搭建独立域名的静态博客的朋友一些启发与引导，另一方面也是给自己的个人笔记，记录下来以后不会遗忘。本文主要针对windows用户。 2. Github和Hexo介绍GitHub 是现在非常火热的一个面向开源及私有软件项目的托管平台，这里我们使用github pages服务搭建博客，使用这个服务的优势在于全是静态文件，访问速度很快，而且免费方便，不需要自己管理服务器和后台，可以将精力都放在博文的撰写上，同时还可以绑定自己的个人域名等。具体参考github官方网站。 Hexo是一款基于Node.js的静态博客框架，它的优势主要在于简便和快速，它支持多进程，支持GitHub Flavored Markdown和所有Octopress的插件，同时还拥有良好的扩展性，支持EJS、Swig和Stylus，并通过插件支持Haml、Jade和Less。具体参考hexo官方网站。 3. 搭建过程3.1 安装Git进入git官方网站下载并安装git，按照操作提示走就可以了。 3.2 安装Node.js进入node.js官方网站下载并安装node.js，步骤也很简单，按照提示走即可，这里需要注意的是，安装完之后最好将电脑重启一下。 3.3 安装和配置Hexo当电脑上成功安装了git和node.js之后，下面就可以通过命令行对hexo进行安装和配置。首先在任意地方点击鼠标右键，选择Git Bash这个选项，然后输入以下命令完成hexo的安装。1$ npm install hexo-cli -g 之后选择某个目录放置创建hexo的文件夹，如F:\hexo，然后进入此文件夹，点击鼠标右键，选择Git Bash这个选项，输入以下命令，实现hexo的初始化配置。12$ hexo init #hexo初始化$ npm install #安装依赖包 通过hexo -v命令可以查看安装的hexo的版本号，以此验证是否安装成功。这时继续在F:\hexo中执行以下命令：12$ hexo g #hexo generate 生成静态页面$ hexo s #hexo server 启动本地服务 在浏览器中打开http://localhost:4000，就可以看到hexo博客框架默认主题的效果了，在命令行中输入ctrl+c可以退出本地预览。 3.4 补充说明在生成静态页面和启动本地服务的时候如果出现报错信息：hexo:ERROR Deployer not found: git，则需要执行以下命令：1$ npm install hexo-deployer-git --save 而如果出现ERROR Plugin load failed: hexo-server的报错信息，则需要执行以下命令：1$ sudo npm install hexo-server 之后再按照上述命令启动本地服务即可看到默认主题的hexo页面了。 这里再补充介绍一下hexo的常用命令。12345678910111213hexo new "My New Post" # create a new posthexo server # run hexo serverhexo generate # Generate static fileshexo deploy # Deploy to remote siteshexo n #hexo new的简写hexo s # hexo server的简写hexo g # hexo generate的简写hexo d # hexo deploy的简写hexo clean # 清楚缓存文件hexo -v # 查看hexo版本hexo help # 查看hexo帮助hexo d -g # 生成部署 组合命令hexo s -g # 生成预览 组合命令 3.5 静态页面部署到Github上3.5.1 创建Github仓库现在我们还只能在本地查看，下面我们将我们的静态博客部署到github上。首先注册自己的github账号，记住自己的用户名、邮箱和密码等。然后在github的个人页面里，选择Repositories并点击New新建一个仓库repositories，填上仓库名Repository name，注意这里的仓库名必须是youname.github.io的形式，即你前面注册的用户名加上.github.io。建立完自己的仓库之后可以通过Settings里面的GitHub Page预览github提供的默认效果页面，网址就是https://youname.github.io/。 3.5.2 配置SSH如果github刚注册还未配置SSH，还需要先配置SSH。SSH 为 Secure Shell 的缩写，是建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。具体的配置方法参考史上最全github使用方法:github入门到精通 3.5.3 部署本地文件到Github上打开本地创建的hexo文件夹，找到_config.yml文件并打开它，这里推荐使用Sublime或Notepad++ 编辑器打开，进行如下修改：1234deploy: type: git repository: https://github.com/yourname/yourname.github.io.git branch: master 这里有两点需要注意，一个是这里的yourname还是前面说的改成注册github时的用户名，另一个是hexo的配置文件中任何’:’后面都是带一个空格的。修改之后保存，执行以下命令：123hexo clean hexo generate #or hexo ghexo deploy #or hexo d 之后打开https://yourname.github.io/看到静态博客页面，说明静态博客已成功部署到了github上。 3.6 修改Hexo配置文件在hexo中主要有两个非常重要的配置文件_config.yml，一个是站点配置文件，一个是主题配置文件。 3.6.1 站点配置文件首先来说一下站点配置文件的修改。站点配置文件位于hexo的根目录下，找到并打开它，主要需要修改的地方如下所示：123456title: Yinzhehao blog #博客名subtitle: Try my best #副标题description: 饮水思源 止于至善 #用于搜索author: Yin Zhehao #作者language: zh-Hans #语言timezone: #时区 12per_page: 10 #每页显示的文章数，0表示不分页pagination_dir: page 123plugins:- hexo-generator-feedtheme: next #使用的主题，即：hexo根目录themes文件夹下的主题文件夹名 1234feed: #配置rss type: atom path: atom.xml limit: 20 以上是站点配置文件中常用的一些需要修改的地方，大家根据自己的意愿进行相应的修改即可。 3.6.2 主题配置文件hexo官方提供了很多主题供大家选择，参见hexo主题主题具体使用方法就是点击自己想要的主题，进入该主题在github中的Repository，然后用git命令将主题clone到本地hexo根目录中themes文件夹下，并将上面站点主题配置里的theme名字改为下载的主题的文件夹名即可。而主题配置文件就位于下载的主题的文件夹里面。 以本博客使用的next主题为例，此主题的github仓库地址是hexo-theme-next，clone下来解压到hexo根目录中themes文件夹下后，将站点主题配置里的theme名字改为next，然后参考Next使用文档完成详细的主题配置，包括主题设定、集成第三方服务、添加标签和分类页面等等。 3.7 发表文章为了检验上面的hexo配置效果，也为以后撰写博客做准备，我们先小试牛刀，发表一篇文章。首先，在hexo根目录下执行以下命令：1$ hexo new &quot;your-post-name&quot; #双引号中是生成的md文件名 然后在F:\hexo\source\_post中打开your-post-name.md文件，同理推荐采用Sublime或Notepad++ 编辑器，并使用Markdown语法进行博客的撰写，Markdown语法参考Markdown语法说明。基本结构如下所示：1234567---title: your-post-name #文章标题date: 2016-09-20 15:57:06 #发表日期tags: [github,hexo,blog] #文章标签categories: blog #文章分类---#下面是正文部分 这里有个小技巧，如果文章整体较长或者作者不想游客一开始就观看到全部内容，可以选择写一段内容简介后，加上&lt;!--more--&gt;，这样之前的内容会显示，而之后的内容会被隐藏，显示Read more或阅读全文，当游客点击之后就能看到全部内容。 之后使用如下命令进行本地预览：12hexo cleanhexo s -g 使用如下命令部署到github上：12hexo cleanhexo d -g 最后打开浏览器登上https://yourname.github.io/就可以看到自己漂亮的静态博客了。 3.8 独立域名配置现在虽然可以访问个人博客了，但是用的域名还是https://yourname.github.io/，为了可以使用独立域名访问自己的个人博客，还需要进行一些设置。 3.8.1 申请与购买域名我是在阿里云进行域名的申请与购买的，大家可以在阿里云或其他地方申请与购买域名，根据不同的后缀价格不同。 3.8.2 DNS解析拥有域名之后还需要进行DNS解析，这里推荐使用DNSPod进行解析，具体方法参考如何使用dnspod解析域名，其中，需要向你的DNS 配置中添加 3 条记录：@ | A | 192.30.252.153@ | A | 192.30.252.154www | CNAME | username.github.io.其中username就是你自己的github用户名。DNS解析需要一段时间，需要耐心等待一会儿。 这里有个需要注意的问题，如果你是在阿里云申请购买的域名，而在DNSPod进行解析的时候，需要回到阿里云，将个人基本信息里面的DNS服务器修改为如下值：f1g1ns1.dnspod.netf1g1ns2.dnspod.net否则无法解析成功。 3.8.3 配置CNAME文件在hexo的根目录的source文件夹里手动添加一个名为CNAME的文件，文件名必须大写且一模一样，打开这个文件，并写上你的域名，且只能包含一个顶级域名，之后保存。然后像前面一样进行本地预览和部署即可。这时在浏览器中输入你的个人域名也可以访问你的静态博客啦。 4. 总结至此，利用Github和Hexo已经搭建出具有独立域名的静态博客了，而且具有了博客的一些基本功能。大家在搭建过程中如果遇到什么问题，欢迎一起探讨解决，也欢迎大家能对本文中存在的问题和不足进行批评指正。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[中秋思乡]]></title>
      <url>%2F2016%2F09%2F15%2F%E4%B8%AD%E7%A7%8B%E6%80%9D%E4%B9%A1%2F</url>
      <content type="text"><![CDATA[2016年9月15日，是中秋节，也是我拥有自己第一个专属域名博客的日子。兴奋之余，本想叙述一下创建这个独立博客过程中的种种艰辛以及对自己而言的重大意义，却不知为何，心中涌出一股惆怅，哦，想家了。 明月几时有？把酒问青天。不知天上宫阙，今夕是何年？我欲乘风归去，又恐琼楼玉宇，高处不胜寒！起舞弄清影，何似在人间？转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆？人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。————《水调歌头》 耳边响起这首熟悉的歌曲，想起自己作为在外求学的游子，今年又不能回去和父母团圆，能做的也只是打一个电话，道一句问候，报一声平安。不觉想起那些年故乡的明月，月色如水，天地一清，家人团聚，一切都是那么的温馨美好。或许就像某人说得那样：再也没有那么好吃的月饼了，再也没有那么纯净的明月了。 海内存知己，天涯若比邻。愿天下有情人，终成眷属。愿天下的父母，身体健康。祝天下芸芸众生，中秋快乐！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F09%2F15%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
